from os.path import abspath
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap

from PyQt5.QtWidgets import QWidget
from PyQt5 import uic

from src.controller.model import PandasModel
import src.utility.fileHandler as io
import src.utility.tableHandler as th

class Actor(QWidget):
    def __init__(self, actorID):
        super().__init__()
        self._modelMovies = None
        self._modelAwards = None
        self._modelGenres = None

        # Load the .ui file
        pathUI = io.getUIPath(abspath(__file__), "actor.ui")
        uic.loadUi(pathUI, self) 

        # Set the text for all the bio information labels 
        dfBio = io.getTable("biography", actorID)
        name = "Name: \n" + str(dfBio.iloc[0]["Birthname"])
        self.uiName.setText(name)
        rating = "Overall rating: \n" + str(th.ratingOverall(actorID))
        self.uiRating.setText(rating)

        # Place of birth
        place = "Place of Birth: \n" + str(dfBio.iloc[0]["Place of birth"])
        self.uiPlace.setText(place)
        # Date of birth
        birth = "Date of Birth: \n" + str(dfBio.iloc[0]["Date of birth"])
        self.uiDate.setText(birth)
        # Spouse. Also there must be a new line for each spouse
        tempListSpouse = str(dfBio.iloc[0]["Spouse"]).split('|')
        spouse = "Spouse: \n" + '\n'.join(tempListSpouse)
        self.uiSpouse.setText(spouse)
        # Height
        height = "Height: \n" + str(dfBio.iloc[0]["Height"])
        self.uiHeight.setText(height)

        self.textBiography.setText(dfBio.iloc[0]["Bio"])
        self.textBiography.setReadOnly(True)
        pixmap = QPixmap(io.getPicture(actorID))
        pixmap = pixmap.scaled(200, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.picture.setPixmap(pixmap)

        # Initialize movie table
        dfMovies = io.getTable("filmography", actorID)
        self._modelMovies = PandasModel(dfMovies)
        self.tableMovies.setModel(self._modelMovies)
        # Initialize award table
        dfAwards = io.getTable("awards", actorID)
        self._modelAwards = PandasModel(dfAwards)
        self.tableAwards.setModel(self._modelAwards)
        # Initialize genre table
        dfGenres = io.getTable("genres", actorID)
        self._modelGenres = PandasModel(dfGenres)
        self.tableGenres.setModel(self._modelGenres)
        # Hide first column of dataframe as it was generated by Pandas
        self.tableMovies.setColumnHidden(0, True)
        self.tableAwards.setColumnHidden(0, True)
        self.tableGenres.setColumnHidden(0, True)

        self.show()